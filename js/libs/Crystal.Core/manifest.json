{
    "name" : "Crystal.Core",
    "description" : "The core module that Crystal runs on. We allow modifications, but it may break the engine. Please tamper with care",
    "version": "2025.3f",
    "scripts" : [
        "bindings",
        "DelegateEvent",
        "Application.bindings",
        "Object.bindings",
        "Resources",
        "Debug",
        "Time",
        "Math/Vector2",
        "Input/Touch/TouchPhase",
        "Input/Touch/Touch",
        "Input/Input",
        "Input/KeyCode",
        "Input/GamepadInput",
        "Scripting/Component",
        "Scripting/Behavior",
        "Scripting/GameBehavior",
        "Math/Math.bindings",
        "Math/Matrix3x3",
        "Math/Color",
        "Math/Geometry/Rect",
        "Math/Geometry/Bounds",
        "Transform",
        "GameObject",
        "QuadTree/QuadTreeItem",
        "QuadTree/QuadTreeNode",
        "QuadTree/QuadTree",
        "SceneManager/Scene",
        "SceneManager/SceneManager",
        "PlayerLoop",
        "Graphics/Shaders/Shader",
        "Graphics/Shaders/GraphicsBufferTarget",
        "Graphics/Shaders/GraphicsBufferUsage",
        "Graphics/Shaders/GraphicsBuffer",
        "Graphics/Shaders/ShaderAttribute",
        "Graphics/Shaders/Material",
        "Graphics/Texture",
        "Graphics/Sprite",
        "Graphics/Rendering/SortingLayer",
        "Graphics/Rendering/Camera",
        "Graphics/Rendering/Renderers/Renderer",
        "Graphics/Rendering/Renderers/SpriteRenderer",
        "Grid"
    ],
    "classes" : [
        {
            "name" : "Vector2",
            "type" : 0,
            "args" : [
                {
                    "name" : "x",
                    "type" : "number"
                },
                {
                    "name" : "y",
                    "type" : "number"
                }
            ]
        },
        {
            "name" : "Color",
            "type" : 0,
            "construction" : "return new Color((data.r ?? 0) / 255, (data.g ?? 0) / 255, (data.b ?? 0) / 255, (data.a ?? 255) / 255);"
        },
        {
            "name" : "Rect",
            "type" : 0,
            "args" : [
                {
                    "name" : "x",
                    "type" : "number"
                },
                {
                    "name" : "y",
                    "type" : "number"
                },
                {
                    "name" : "width",
                    "type" : "number"
                },
                {
                    "name" : "height",
                    "type" : "number"
                }
            ]
        },
        {
            "name" : "Transform",
            "type" : 0,
            "construction" : "const output = new Transform(); if (data.rotation != null) output.localRotation = data.rotation; if (data.position != null) output.localPosition = await toObject(\"Vector2\", data.position); if (data.scale != null) output.localScale = await toObject(\"Vector2\", data.scale); return output;"
        },
        {
            "name" : "GameObject",
            "type" : 0,
            "construction" : "const transform = await toObject(\"Transform\", data.transform); transform.parent = data.parent; return new GameObject(data.name, data.components, data.active, transform, data.id);"
        },
        {
            "name" : "Material",
            "type" : 0,
            "construction" : "if (typeof data === \"string\") Resources.Find(data).Duplicate(); else if (typeof data === \"object\") new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\"));"
        },
        {
            "name" : "Material",
            "type" : 1,
            "construction" : "return new Material(Shader.Find(data.vertexShader ?? \"Default/Standard\", \"VERTEX\"), Shader.Find(data.fragmentShader ?? \"Default/Standard\", \"FRAGMENT\"));"
        },
        {
            "name" : "Texture",
            "type" : 0,
            "construction" : "return Resources.Find(data);"
        },
        {
            "name" : "Texture",
            "type" : 1,
            "construction" : "const output = new Texture(data.src); await output.Load(); const sprites = data.sprites ?? []; for (let i = 0; i < sprites.length; i++) { const sprite = sprites[i]; const rect = sprite.rect == null ? null : await toObject(\"Rect\", sprite.rect); const newSprite = new Sprite(sprite.name, output, rect); if (sprite.pivot != null) newSprite.pivot = await toObject(\"Vector2\", sprite.pivot); output.sprites.push(newSprite); } return output;",
            "args" : [
                {
                    "name" : "pixelPerUnit",
                    "type" : "number"
                },
                {
                    "name" : "wrapMode",
                    "type" : "number"
                },
                {
                    "name" : "filterMode",
                    "type" : "number"
                }
            ]
        },
        {
            "name" : "Sprite",
            "type" : 0,
            "construction" : "if (data.name != null) return Resources.Find(data.texture).sprites.find(item => item.name === data.name).Duplicate(); return Resources.Find(data.texture).sprites[data.index ?? 0].Duplicate();",
            "args" : [
                {
                    "name" : "pivot",
                    "type" : "Vector2"
                },
                {
                    "name" : "rect",
                    "type" : "Rect"
                }
            ]
        },
        {
            "name" : "Camera",
            "type" : 0,
            "args" : [
                {
                    "name" : "orthographicSize",
                    "type" : "number"
                },
                {
                    "name" : "backgroundColor",
                    "type" : "Color"
                }
            ]
        },
        {
            "name" : "SpriteRenderer",
            "type" : 0,
            "construction" : "return new SpriteRenderer(await toObject(\"Sprite\", data.sprite), await toObject(\"Material\", data.material));",
            "args" : [
                {
                    "name" : "color",
                    "type" : "Color"
                },
                {
                    "name" : "sortingLayer",
                    "type" : "number"
                },
                {
                    "name" : "sortingOrder",
                    "type" : "number"
                }
            ]
        },
        {
            "name" : "Grid",
            "type" : 0,
            "args" : [
                {
                    "name" : "cellGap",
                    "type" : "Vector2"
                },
                {
                    "name" : "cellSize",
                    "type" : "Vector2"
                }
            ]
        }
    ]
}